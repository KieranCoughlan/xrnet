Server

Role: Handle the connection
Server-side Role: Allow clients to join a session

OPTION:
Why not hardcode the session details in the server code? JSON perhaps. Then easily reconfigured for different apps, but not all at once. Then the server is a single session all the time.

Sounds like a good simplification here. Means the one server for everything won't work, but that's OK?

So server running on a single host configured for one specific type of experience.

Do we still pass a contract? Need some kind of signature, I think. A UUID? Simple well understood.

so session.json might look like:

{
  sessionId: "da90ef03-cac0-428d-b38b-302c53c7fe11",
  clientChannels: [128, 4],
  serverChannels: []
}

Should simplify things. 

Three messages:

* join
* leave
* send

Server needs to relay

Useful to have a connection idea?

Serverside-server has a collection of client connections and relay mechanism
Clientside-server has a single connection (and no relay mechanism)
Not sure how that looks yet.
Another difference is that the client initiates the connection, the server never does

Portion that deals with the connection | Portion that deals with the data
                                       |
Client version                         | Common
Server version                         | 

ClientConnector
ServerConnector (includes details of all clients and relay)
ServerData

ClientConnector, initiates a single websocket to the server
ServerConnector, waits for incoming connections and maintains them

ServerData: Clients: [], ClientChannels [], ServerChannels [] 

{OR: Clients hold client channels, maybe}

Also: when joining, the ServerConnector has to send you all current ServerData info to allow syncronisation

